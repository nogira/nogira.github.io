# Applescript Automation Cheat Sheet


Use the built-in `Script Editor` app to write and run applescripts

Basic syntax & commands:
```applescript
-- this is a comment

set var1 to "hello"
```


Commands can be application specific or general commands. An application specific command would need to be sent to that application; for instance:
```applescript
tell application "Safari"
    -- commands go in here
	
    -- this command opens the application
    -- note: this command is useful for bringing a window into focus
    activate

    -- this command does a google search for "yes" in a new tab
    search the web for "yes"
	
    -- this command closes the application
    quit
end tell
```
In order to find the commands available for each application, in the application "Script Editor" go to `File` => `Open Dictionary`, then select an application.


The other way is to instead send commands to a thing called "System Events". Commands sent here include typing, clicking on UI elements, etc. Commands are placed in a similar manner to how it was done for a specific application:
```applescript
tell application "System Events"
    -- commands go in here
end tell
```

While sending commands to specific applications can be useful, the easiest way is to just use "System Events". The main reason for this is while you can check `Open Dictionary` for commands, the documentation is not always very clear. For "System Events" however, there is a **very** easy way to work out the exact command you need to make something happen:

Open the built-in app "Automator"
=> Choose `Workflow`.
=> Click the bright red `Record` button in the top right of the window.
=> Perform the action you want to know the command of.
=> Click the stop button.
=> In the new `Watch Me Do` box that has appeared, select all events.
=> `Command C`
=> Paste it in the built-in `Script Editor` app (or equivalent).

While you can leave it as it is, you also have the option of simplifying the code a bit to make it more readable, and potentially execute faster than human speed.

Here is an example of unmodified code generated by automator:
```applescript
-- Click the "Software Update" button.
delay 18.266890
set timeoutSeconds to 2.000000
set uiScript to "click UI Element \"Software Update\" of scroll area 1 of window \"System Preferences\" of application process \"System Preferences\""
my doWithTimeout( uiScript, timeoutSeconds )

on doWithTimeout(uiScript, timeoutSeconds)
    set endDate to (current date) + timeoutSeconds
    repeat
        try
            run script "tell application \"System Events\"" & uiScript & "end tell"
            exit repeat
        on error errorMessage
            if ((current date) > endDate) then
                error "Can not " & uiScript
            end if
        end try
    end repeat
end doWithTimeout
```
There are two main things to see in this code; the speed, and the verbosity. This first line `delay 18.266890` indicates that every time you run this script, it will first wait 18 seconds before executing the click, which is not very optimal. Thus, the first thing you should do is delete it.

The rest is a bit more complex. If you look around the middle you should see `on doWithTimeout(uiScript, timeoutSeconds)` which is the start of the main function, with everything below that being part of that function. Essentially, the 3rd line of code `set uiScript to...` has a command inside its string which is being passed to the function (`my doWithTimeout( uiScript, timeoutSeconds )`), and the function is executing that command to "System Events".

To simplify this, we start with the string of `uiScript`. This is the only part of the original code we need:
```applescript
"click UI Element \"Software Update\" of scroll area 1 of window \"System Preferences\" of application process \"System Preferences\""
```
Now we need to convert it from a string of commands to the commands themselves. Just remove the `"` at the very start of the string, and at the very end of the string, then finally remove all backslashes (`\`):
```applescript
click UI Element "Software Update" of scroll area 1 of window "System Preferences" of application process "System Preferences"
```

Now to make sure the commands are sent to "System Events", we place them inside this `tell` command (look back to the start of this article if confused):
```applescript
tell application "System Events"
    click UI Element "Software Update" of scroll area 1 of window "System Preferences" of application process "System Preferences"
end tell
```

And now we're done. Much simpler.


Here are some random "System Events" commands I've found useful:
```applescript
-- press N, shift, and command at the same time
keystroke "N" using {shift down, command down}

-- type the word 'word'
-- note: types one character after the other as opposed to inserting the whole word all at once
keystroke "word"
```